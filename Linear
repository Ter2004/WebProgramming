#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_MESSAGE_LENGTH 100
#define MAX_KEY_MATRIX_SIZE 10

int main() {
    char message[MAX_MESSAGE_LENGTH];
    int keyMatrix[MAX_KEY_MATRIX_SIZE][MAX_KEY_MATRIX_SIZE];
    int encryptedMessage[MAX_MESSAGE_LENGTH];
    int decryptedMessage[MAX_MESSAGE_LENGTH];
    int numRows, numCols;

    // Get message from user
    printf("Enter the message to be encrypted: ");
    fgets(message, MAX_MESSAGE_LENGTH, stdin);

    // Get key matrix from user
    printf("Enter the number of rows and columns of the key matrix: ");
    scanf("%d %d", &numRows, &numCols);

    // Check if key matrix is square
    if (numRows != numCols) {
        printf("Key matrix must be square.\n");
        return 1;
    }

    // Get key matrix elements from user
    printf("Enter the elements of the key matrix row by row:\n");
    for (int i = 0; i < numRows; i++) {
        for (int j = 0; j < numCols; j++) {
            scanf("%d", &keyMatrix[i][j]);
        }
    }

    // Perform encryption
    int messageLength = strlen(message) - 1; // Exclude newline character
    int paddedLength = (messageLength + numCols - 1) / numCols;
    for (int i = messageLength; i < paddedLength * numCols; i++) {
        message[i] = ' '; // Pad with spaces if necessary
    }

    for (int i = 0; i < paddedLength; i++) {
        for (int j = 0; j < numCols; j++) {
            int encryptedChar = 0;
            for (int k = 0; k < numCols; k++) {
                encryptedChar += keyMatrix[j][k] * (message[i * numCols + k] - 'A');
            }
            encryptedMessage[i * numCols + j] = (encryptedChar % 26) + 'A';
        }
    }

    // Print encrypted message
    printf("Encrypted message: ");
    for (int i = 0; i < paddedLength * numCols; i++) {
        printf("%c", encryptedMessage[i]);
    }
    printf("\n");

    // Perform decryption
    for (int i = 0; i < paddedLength; i++) {
        for (int j = 0; j < numCols; j++) {
            int decryptedChar = 0;
            for (int k = 0; k < numCols; k++) {
                decryptedChar += (keyMatrix[j][k] * (encryptedMessage[i * numCols + k] - 'A')) % 26;
            }
            decryptedMessage[i * numCols + j] = (decryptedChar + 26) % 26 + 'A';
        }
    }

    // Print decrypted message
    printf("Decrypted message: ");
    for (int i = 0; i < messageLength; i++) {
        printf("%c", decryptedMessage[i]);
    }
    printf("\n");

    return 0;
}
